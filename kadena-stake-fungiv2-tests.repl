;;////////////////////
;;COIN ACCOUNT STUFF
;;////////////////////

;; Enable the table gas model and load the coin contract + create coin contract tables
(env-gasmodel "table")
(env-gaslimit 150000)
(begin-tx)
(env-gas 0) (env-gaslog)
(load "fungible-v2.pact")
(load "fungible-xchain-v1.pact")
(env-gaslog)
(expect
  "Gas cost of loading fungible contract"
  121235 (env-gas))
(env-gas 0) (env-gaslog)
(load "coin.pact")
(env-gaslog)
(expect
  "Gas cost of loading coin contract"
  74192 (env-gas))
(create-table coin.coin-table)
(create-table coin.allocation-table)
(commit-tx)

;;///////////////////////////
;Create test keys
;////////////////////////////

(begin-tx)
(env-data { "k:emily" : ["emily"], "admin-kadena-stake": ["keys2"], "k:stuart": ["stuart"], "k:doug": ["doug"], "k:kitty": ["kitty"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
(env-keys ["emily", "keys2", "stuart", "doug", "kitty"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset "k:doug" (read-keyset "k:doug"))
(define-keyset 'admin-kadena-stake (read-keyset "admin-kadena-stake"))
(define-keyset "k:stuart" (read-keyset "k:stuart"))
(define-keyset "k:kitty" (read-keyset "k:kitty"))
(commit-tx)

;/////////////////////////////
;Create test coin accounts
;//////////////////////////////

(begin-tx)
(env-gas 0) (env-gaslog)
(use coin)
(env-gaslog)
(expect
  "Gas cost of using the coin contract"
  2 (env-gas))
(env-gas 0) (env-gaslog)
(create-account "k:emily" (read-keyset "k:emily"))
(create-account 'admin-kadena-stake (read-keyset 'admin-kadena-stake))
(create-account "k:stuart" (read-keyset "k:stuart"))
(create-account "k:doug" (read-keyset "k:doug"))
(create-account "k:kitty" (read-keyset "k:kitty"))
(commit-tx)

;///////////////////////////////
;Credit test accounts test KDA
;////////////////////////////////
(begin-tx)
(use coin)
(env-gas 0) (env-gaslog)
(test-capability (DEBIT "k:emily"))
(env-gaslog)
(expect
  "Gas cost of testing the DEBIT capability"
  26 (env-gas))

;; credit tests
(test-capability (CREDIT "k:emily"))
(credit "k:emily" (read-keyset "k:emily") 1000.0)

(test-capability (CREDIT "k:kitty"))
(credit "k:kitty" (read-keyset "k:kitty") 1000.0)

(test-capability (CREDIT "k:doug"))
(credit "k:doug" (read-keyset "k:doug") 1000.0)
(expect
  "account balance reflects credit"
  1000.0
  (get-balance "k:emily"))

(test-capability (CREDIT "admin-kadena-stake"))
(credit 'admin-kadena-stake (read-keyset 'admin-kadena-stake) 1000.0)
(expect
  "account balance reflects credit"
  1000.0
  (get-balance 'admin-kadena-stake))

(test-capability (CREDIT "k:stuart"))
(credit "k:stuart" (read-keyset "k:stuart") 1000.0)
(expect
  "account balance reflects credit"
  1000.0
  (get-balance "k:stuart"))
(commit-tx)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;ANEDAK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(begin-tx)
(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test })
(load "anedak.pact")
(create-table token-table)


;DEFINE ACCOUNTS AGAIN
(env-data { "k:emily" : ["emily"], "admin-kadena-stake": ["keys2"], "k:stuart": ["stuart"], "k:doug": ["doug"], "k:kitty": ["kitty"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
(env-keys ["emily", "keys2", "stuart", "doug", "kitty"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset "k:doug" (read-keyset "k:doug"))
(define-keyset 'admin-kadena-stake (read-keyset "admin-kadena-stake"))
(define-keyset "k:stuart" (read-keyset "k:stuart"))
(define-keyset "k:kitty" (read-keyset "k:kitty"))

(describe-keyset "k:emily")

(test.anedak.check-reserved "k:emily")
(test.anedak.enforce-reserved2 "k:emily" (read-keyset "k:emily"))

;k:emily k:emily
;KeySet {keys: [k:emily],pred: keys-all}
;KeySet {keys: [emily],pred: keys-all}

(test.anedak.initialize)
(test.anedak.move-premine "k:emily"(read-keyset "k:emily") 1000.0  )
(test.anedak.get-balance "k:emily")

;(test.anedak.create-account "k:kitty" (read-keyset "k:kitty"))

(commit-tx)

(begin-tx)
(use test.anedak)
(test-capability (test.anedak.TRANSFER "k:emily" "k:kitty" 100.0))
(test.anedak.transfer-create "k:emily" "k:kitty" (read-keyset "k:kitty") 100.0)

(test-capability (test.anedak.TRANSFER "k:emily" "k:doug" 100.0))
(test.anedak.transfer-create "k:emily" "k:doug" (read-keyset "k:doug") 100.0)

(test-capability (test.anedak.TRANSFER "k:emily" "k:stuart" 100.0))
(test.anedak.transfer-create "k:emily" "k:stuart" (read-keyset "k:stuart") 100.0)
(commit-tx)
;We transfer 100 ADK to stakers for testing with below


;;;;;;;;;;;;;;;;;;;;;;;;;////////////////////////////
;;kadena-stake TESTS
;;;;;;;;;;;;;;;;;;;;;;;;;;//////////////////////////

;Load Contract + Create Tables
(begin-tx)
(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test })
(load "kadena-stake-fungiv2-vbot.pact")
(create-table test.kadena-stake-fungiv2.pools)
(create-table test.kadena-stake-fungiv2.pools-usage)
(create-table test.kadena-stake-fungiv2.stakes)
(create-table test.kadena-stake-fungiv2.pool-user-stats)


(env-gaslog)
(commit-tx)


;//////////////////////////////////////////////////////////////////////////////////////////////////////////
;TEST POOL TEST
;VARIABLE APY TESTING 1
;/////////////////////////////////////////////////////////////////////////////////////////////////////////


;Test create pool 'test-pool' with k:stuart for 200 KDA
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-pool" 200.0))
(env-chain-data { "block-time" : (time "2023-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2.create-pool
    "test-pool"
    "Test Pool"
    10.0
    200.0
    coin
    coin
    "k:stuart"
    200.0
    0.0
    200.0
    86400.0
    10.0
    false
    86400.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)
;A pool is created that will distribute 10 rewards every 86400.0 seconds (1 day)
;pool multiplier: 1.0


;Test create stake 100 coin in test-pool with k:emily
(begin-tx)
(coin.get-balance "k:emily")
(env-chain-data { "block-time" : (time "2023-04-01T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool" 100.0))
(test.kadena-stake-fungiv2.create-stake "test-pool" "k:emily" 100.0)
(coin.get-balance "k:emily")
(coin.get-balance "test-pool")

(test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:emily")
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.get-user-stakes "test-pool" "k:emily")
(commit-tx)
;Emily stakes 100 coin for 100% of the pool


;Lets update & check rewards 1 DAY later for everyone
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-02T00:00:00Z") })
;+24 hours - DAY 2
(test.kadena-stake-fungiv2.update-pool-rewards "test-pool")
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
;Update pool multiplier
(test.kadena-stake-fungiv2.calculate-total-emitted-tokens "test-pool")
;Test calculate emitted tokens = 10 tokens emitted

(test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:emily")
;Emily gets 10 rewards if she withdraws today
(commit-tx)


;Lets update & check rewards 2 DAYS later for everyone
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-03T00:00:00Z") })
;+24 hours - DAY 2
(test.kadena-stake-fungiv2.update-pool-rewards "test-pool")
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
;Update pool multiplier
(test.kadena-stake-fungiv2.calculate-total-emitted-tokens "test-pool")
;Test calculate emitted tokens = 20 tokens emitted

(test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:emily")
;Emily gets 20 rewards if she withdraws today
(commit-tx)


;Test create stake 100 coin in test-pool with k:doug
(begin-tx)
(coin.get-balance "k:doug")
(env-chain-data { "block-time" : (time "2023-04-03T00:00:00Z") })
(test-capability (coin.TRANSFER "k:doug" "test-pool" 100.0))
(test.kadena-stake-fungiv2.create-stake "test-pool" "k:doug" 100.0)
(coin.get-balance "k:doug")
(coin.get-balance "test-pool")

(test.kadena-stake-fungiv2.calculate-total-emitted-tokens "test-pool")
;20 Tokens total emitted thus far

(test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:emily")
;Emily gets 20 tokens if she withdraws today

(test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:doug")
;Doug gets 0 tokens if he withdraws today

(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.get-user-stakes "test-pool" "k:doug")
(commit-tx)
;Emily stakes 100 coin for 100% of the pool


;Lets update & check rewards 2 DAYS later for everyone
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-04T00:00:00Z") })
;+24 hours - DAY 2
(test.kadena-stake-fungiv2.update-pool-rewards "test-pool")
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
;Update pool multiplier
(test.kadena-stake-fungiv2.calculate-total-emitted-tokens "test-pool")
;Test calculate emitted tokens = 20 tokens emitted

(test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:emily")
;Emily gets 25 rewards if she withdraws today
(test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:doug")
;Doug gets 5 rewards if he withdraws today
(commit-tx)

;Tests with bot 
