;;////////////////////
;;COIN ACCOUNT STUFF
;;////////////////////

;; Enable the table gas model and load the coin contract + create coin contract tables
(env-gasmodel "table")
(env-gaslimit 150000)
(begin-tx)
(env-gas 0) (env-gaslog)
(load "fungible-v2.pact")
(load "fungible-xchain-v1.pact")
(env-gaslog)
(expect
  "Gas cost of loading fungible contract"
  121235 (env-gas))
(env-gas 0) (env-gaslog)
(load "coin.pact")
(env-gaslog)
(expect
  "Gas cost of loading coin contract"
  74192 (env-gas))
(create-table coin.coin-table)
(create-table coin.allocation-table)
(commit-tx)

;;///////////////////////////
;Create test keys
;////////////////////////////

(begin-tx)
(env-data { "k:emily" : ["emily"], "admin-kadena-stake": ["keys2"], "k:stuart": ["stuart"], "k:doug": ["doug"], "k:kitty": ["kitty"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
(env-keys ["emily", "keys2", "stuart", "doug", "kitty"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset "k:doug" (read-keyset "k:doug"))
(define-keyset 'admin-kadena-stake (read-keyset "admin-kadena-stake"))
(define-keyset "k:stuart" (read-keyset "k:stuart"))
(define-keyset "k:kitty" (read-keyset "k:kitty"))
(commit-tx)

;/////////////////////////////
;Create test coin accounts
;//////////////////////////////

(begin-tx)
(env-gas 0) (env-gaslog)
(use coin)
(env-gaslog)
(expect
  "Gas cost of using the coin contract"
  2 (env-gas))
(env-gas 0) (env-gaslog)
(create-account "k:emily" (read-keyset "k:emily"))
(create-account 'admin-kadena-stake (read-keyset 'admin-kadena-stake))
(create-account "k:stuart" (read-keyset "k:stuart"))
(create-account "k:doug" (read-keyset "k:doug"))
(create-account "k:kitty" (read-keyset "k:kitty"))
(commit-tx)

;///////////////////////////////
;Credit test accounts test KDA
;////////////////////////////////
(begin-tx)
(use coin)
(env-gas 0) (env-gaslog)
(test-capability (DEBIT "k:emily"))
(env-gaslog)
(expect
  "Gas cost of testing the DEBIT capability"
  26 (env-gas))

;; credit tests
(test-capability (CREDIT "k:emily"))
(credit "k:emily" (read-keyset "k:emily") 1000.0)

(test-capability (CREDIT "k:kitty"))
(credit "k:kitty" (read-keyset "k:kitty") 1000.0)

(test-capability (CREDIT "k:doug"))
(credit "k:doug" (read-keyset "k:doug") 1000.0)
(expect
  "account balance reflects credit"
  1000.0
  (get-balance "k:emily"))

(test-capability (CREDIT "admin-kadena-stake"))
(credit 'admin-kadena-stake (read-keyset 'admin-kadena-stake) 1000.0)
(expect
  "account balance reflects credit"
  1000.0
  (get-balance 'admin-kadena-stake))

(test-capability (CREDIT "k:stuart"))
(credit "k:stuart" (read-keyset "k:stuart") 1000.0)
(expect
  "account balance reflects credit"
  1000.0
  (get-balance "k:stuart"))
(commit-tx)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;ANEDAK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(begin-tx)
(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test })
(load "anedak.pact")
(create-table token-table)


;DEFINE ACCOUNTS AGAIN
(env-data { "k:emily" : ["emily"], "admin-kadena-stake": ["keys2"], "k:stuart": ["stuart"], "k:doug": ["doug"], "k:kitty": ["kitty"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
(env-keys ["emily", "keys2", "stuart", "doug", "kitty"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset "k:doug" (read-keyset "k:doug"))
(define-keyset 'admin-kadena-stake (read-keyset "admin-kadena-stake"))
(define-keyset "k:stuart" (read-keyset "k:stuart"))
(define-keyset "k:kitty" (read-keyset "k:kitty"))

(describe-keyset "k:emily")

(test.anedak.check-reserved "k:emily")
(test.anedak.enforce-reserved2 "k:emily" (read-keyset "k:emily"))

;k:emily k:emily
;KeySet {keys: [k:emily],pred: keys-all}
;KeySet {keys: [emily],pred: keys-all}

(test.anedak.initialize)
(test.anedak.move-premine "k:emily"(read-keyset "k:emily") 1000.0  )
(test.anedak.get-balance "k:emily")

;(test.anedak.create-account "k:kitty" (read-keyset "k:kitty"))

(commit-tx)

(begin-tx)
(use test.anedak)
(test-capability (test.anedak.TRANSFER "k:emily" "k:kitty" 100.0))
(test.anedak.transfer-create "k:emily" "k:kitty" (read-keyset "k:kitty") 100.0)

(test-capability (test.anedak.TRANSFER "k:emily" "k:doug" 100.0))
(test.anedak.transfer-create "k:emily" "k:doug" (read-keyset "k:doug") 100.0)

(test-capability (test.anedak.TRANSFER "k:emily" "k:stuart" 100.0))
(test.anedak.transfer-create "k:emily" "k:stuart" (read-keyset "k:stuart") 100.0)
(commit-tx)
;We transfer 100 ADK to stakers for testing with below


;;;;;;;;;;;;;;;;;;;;;;;;;////////////////////////////
;;kadena-stake TESTS
;;;;;;;;;;;;;;;;;;;;;;;;;;//////////////////////////

;Load Contract + Create Tables
(begin-tx)
(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test })
(load "kadena-stake-fungiv2-variable.pact")
(create-table test.kadena-stake-fungiv2.pools)
(create-table test.kadena-stake-fungiv2.pools-usage)
(create-table test.kadena-stake-fungiv2.stakes)
(create-table test.kadena-stake-fungiv2.pool-user-stats)


(env-gaslog)
(commit-tx)


;//////////////////////////////////////////////////////////////////////////////////////////////////////////
;TEST POOL TEST
;VARIABLE APY TESTING 1
;/////////////////////////////////////////////////////////////////////////////////////////////////////////

;/////////////////////////////////////////////////////////////////////////////////

;Test create pool 'test-pool' with k:stuart for 50 KDA
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-pool" 50.0))
(env-chain-data { "block-time" : (time "2023-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2.create-pool
    "test-pool"
    "Test Pool"
    10.0
    50.0
    coin
    coin
    "k:stuart"
    50.0
    0.0
    50.0
    86400.0
    10.0
    false
    86400.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)
;A pool is created with 50 KDA rewards
;The pool will distribute 10 rewards every 86400.0 seconds (1 day)
;pool multiplier: 1.0

;/////////////////////////////////////////////////////////////////////////////////////

;Test create stake 100 coin in test-pool with k:emily
(begin-tx)
(coin.get-balance "k:emily")
(env-chain-data { "block-time" : (time "2023-04-01T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool" 100.0))
(test.kadena-stake-fungiv2.create-stake "test-pool" "k:emily" 100.0)
(coin.get-balance "k:emily")
(coin.get-balance "test-pool")

(expect
    "Emily gets 0 rewards same day she stakes"
    0.000000000000
    (test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:emily")
)

(expect
    "Current Pool Multiplier = 1.0"
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-pool-info "test-pool")) 1.0)
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-pool-info "test-pool")) 1.0)
)

(expect
    "Emilys Saved Multiplier = 1.0"
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-user-stakes "test-pool" "k:emily")) 1.0)
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-user-stakes "test-pool" "k:emily")) 1.0)
)

(test.kadena-stake-fungiv2.get-user-stakes "test-pool" "k:emily")

(commit-tx)
;Emily stakes 100 coin for 100% of the pool

;////////////////////////////////////////////////////////////////////////////////////////////////

;Lets check rewards 1 DAY later for emily
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-02T00:00:00Z") })
;Fastforward time +24 hours

(expect
    "The Pool has emitted 10 tokens thus far"
    10.000000000000
    (test.kadena-stake-fungiv2.calculate-total-emitted-tokens "test-pool")
)

(expect
    "Emily gets 10 rewards if she withdraws today"
    10.000000000000
    (test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:emily")
)

(expect
    "Current Pool Multiplier = 1.0"
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-pool-info "test-pool")) 1.0)
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-pool-info "test-pool")) 1.0)
)

(expect
    "A multiplier calculated right now is 1.1"
    1.1
    (test.kadena-stake-fungiv2.calculate-multiplier "test-pool")
)

(test.kadena-stake-fungiv2.get-user-stakes "test-pool" "k:emily")
(commit-tx)
;Test passes - Next day data is correct

;////////////////////////////////////////////////////////////////////////////////////////////////


;Lets check rewards 2 DAYS later for emily
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-03T00:00:00Z") })
;Fastforward time +24 hours

(expect
    "The Pool has emitted 20 tokens thus far"
    20.000000000000
    (test.kadena-stake-fungiv2.calculate-total-emitted-tokens "test-pool")
)

(expect
    "Emily gets 20 rewards if she withdraws today"
    20.000000000000
    (test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:emily")
)

(expect
    "Current Pool Multiplier = 1.0"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-pool-info "test-pool")) 1.0)
)

(expect
    "A multiplier calculated right now is 1.2"
    1.2
    (test.kadena-stake-fungiv2.calculate-multiplier "test-pool")
)
(commit-tx)
;Test passes - Next day data is correct

;/////////////////////////////////////////////////////////////////////////////////////////////////////

;Test create stake 100 coin in test-pool with k:doug
(begin-tx)
(coin.get-balance "k:doug")
(env-chain-data { "block-time" : (time "2023-04-03T00:00:00Z") })
(test-capability (coin.TRANSFER "k:doug" "test-pool" 100.0))
(test.kadena-stake-fungiv2.create-stake "test-pool" "k:doug" 100.0)
(coin.get-balance "k:doug")
(coin.get-balance "test-pool")
(test.kadena-stake-fungiv2.get-user-stakes "test-pool" "k:doug")

(expect
    "Doug gets 0 rewards same day he stakes"
    0.000000000000
    (test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:doug")
)

(expect
    "Current Pool Multiplier = 1.2"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-pool-info "test-pool")) 1.2)
)

(expect
    "Dougs Saved Multiplier = 1.2"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-user-stakes "test-pool" "k:doug")) 1.2)
)

(commit-tx)
;Doug stakes 100 coin for 50% of the pool

;/////////////////////////////////////////////////////////////////////////////////////////////////////////


;Lets check rewards 3 DAYS later for emily and doug
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-04T00:00:00Z") })
;Fastforward time +24 hours

(expect
    "The Pool has emitted 30 tokens thus far"
    30.000000000000
    (test.kadena-stake-fungiv2.calculate-total-emitted-tokens "test-pool")
)

(expect
    "Emily gets 25 rewards if she withdraws today"
    25.000000000000
    (test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:emily")
)

(expect
    "Doug gets 5 rewards if she withdraws today"
    5.000000000000
    (test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:doug")
)

(test.kadena-stake-fungiv2.get-pool-info "test-pool")

(expect
    "Current Pool Multiplier = 1.2"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-pool-info "test-pool")) 1.2)
)

(expect
    "A multiplier calculated right now is 1.25"
    1.25
    (test.kadena-stake-fungiv2.calculate-multiplier "test-pool")
)
(commit-tx)
;Test passes - Next day data for both stakers is correct

;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


;Test create stake 100 coin in test-pool with k:kitty SAME DAY AS ABOVE
(begin-tx)
(coin.get-balance "k:kitty")
(env-chain-data { "block-time" : (time "2023-04-04T00:00:00Z") })
(test-capability (coin.TRANSFER "k:kitty" "test-pool" 100.0))
(test.kadena-stake-fungiv2.create-stake "test-pool" "k:kitty" 100.0)
(coin.get-balance "k:kitty")
(coin.get-balance "test-pool")
(test.kadena-stake-fungiv2.get-pool-info "test-pool")

(expect
    "Kitty gets 0 rewards same day he stakes"
    0.000000000000
    (test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:kitty")
)

(expect
    "Current Pool Multiplier = 1.25"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-pool-info "test-pool")) 1.25)
)


(expect
    "Dougs Saved Multiplier = 1.25"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-user-stakes "test-pool" "k:kitty")) 1.25)
)

(commit-tx)
;Kitty stakes 100 coin for 33% of the pool

;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

;Lets check rewards 4 DAYS later for emily and doug and kitty
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-05T00:00:00Z") })
;Fastforward time +24 hours

(expect
    "The Pool has emitted 40 tokens thus far"
    40.000000000000
    (test.kadena-stake-fungiv2.calculate-total-emitted-tokens "test-pool")
)

(expect
    "Emily gets 28.3 rewards if she withdraws today"
    28.333333333333
    (test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:emily")
)

(expect
    "Doug gets 8.3 rewards if she withdraws today"
    8.333333333333
    (test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:doug")
)

(expect
    "Kitty gets 3.3 rewards if she withdraws today"
    3.333333333333
    (test.kadena-stake-fungiv2.calculate-rewards "test-pool" "k:kitty")
)

(test.kadena-stake-fungiv2.get-pool-info "test-pool")

(expect
    "Current Pool Multiplier = 1.25"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2.get-pool-info "test-pool")) 1.25)
)

(expect
    "A multiplier calculated right now is 1.283"
    1.283333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333
    (test.kadena-stake-fungiv2.calculate-multiplier "test-pool")
)
(commit-tx)
;Test passes - Next day data for both stakers is correct

;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

;THE NEXT 3 TESTS WILL SPAN OVER 3 DAYS TO DRAIN THE POOL EMPTY SO WE CAN OBSERVE THE POOL AS IT COLLAPSES
;THE FIRST FEW TESTS WE STEP THROUGH 3 DAYS UNTIL THE POOL EMITS ALL ITS REWARDS TO STAKERS

;////4 Days after pool launch - 40 rewards emitted

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-05T00:00:01Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:emily" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-05T00:00:01Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:doug" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-05T00:00:01Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:kitty" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

;////5 Days after pool launch - 50 rewards emitted

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-06T00:00:02Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:emily" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-06T00:00:02Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:doug" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-06T00:00:02Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:kitty" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

;////6 Days after pool launch - Max rewards emitted - Pool will empty and deactivate in this test

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-07T00:00:03Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:emily" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

(begin-tx)
(expect
  "300 Tokens Left In Pool (Un-Staked Tokens) - Correct"
  300.0
  (coin.get-balance "test-pool"))
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-07T00:00:03Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:doug" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-07T00:00:03Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:kitty" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-07T00:00:04Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:emily" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

(begin-tx)
(expect
  "0 Tokens Left In Pool (Un-Staked Tokens) - Correct"
  0.0
  (coin.get-balance "test-pool"))
(commit-tx)

;///The pool has emptied, deactivated, and the stakers all withdrew their stake trying to claim rewards

;////////////////////////////////////////////////////////////////////////////////////////////////////////

;SANITY CHECK TIME

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-10T00:00:00Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")

;Test create new stake in a deactivated pool
(test-capability (coin.TRANSFER "k:kitty" "test-pool" 100.0))
(expect
  "The pool test-pool is currently deactivated and not accepting stakers"
  "The pool test-pool is currently deactivated and not accepting stakers"
  (test.kadena-stake-fungiv2.create-stake "test-pool" "k:kitty" 100.0))
;Kitty cannot stake because the pool is deactivated and empty - correct

;Test claim rewards from a pool that a user has 0 rewards due
(expect
  "k:emily has no rewards in test-pool"
  "k:emily has no rewards in test-pool"
  (test.kadena-stake-fungiv2.claim "test-pool" "k:emily" false))
;Emily cannot claim anything from test pool because she has already claimed her rewards, and unstaked - correct

;Test adding 50 rewards to the empty pool, thus reactivating it
(test-capability (coin.TRANSFER "k:stuart" "test-pool" 50.0))
(expect
  "Added 50.0 coin rewards to test-pool"
  "Added 50.0 coin rewards to test-pool"
  (test.kadena-stake-fungiv2.add-balance-to-pool "test-pool" "k:stuart" 50.0))
;Stuart reactivates the pool with 50 new rewards for stakers
;All stakers left this pool when they claimed their rewards earlier

;Test claim rewards again with emily for sanity check after pool reactivation
(expect
  "k:emily has no rewards in test-pool"
  "k:emily has no rewards in test-pool"
  (test.kadena-stake-fungiv2.claim "test-pool" "k:emily" false))
;Emily has no rewards in test pool - correct

(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

;////////////////////////////////////////////////////////////////////////////////////////////////////////////

;CONTINUATION OF POOL AFTER POOL COLLAPSES AND GETS REACTIVATED BY STUART

;//////////////////////////////////

;2 STAKERS ARRIVE:

;Kitty stakes 100 kda
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-11T00:00:00Z") })
(test-capability (coin.TRANSFER "k:kitty" "test-pool" 100.0))
(test.kadena-stake-fungiv2.create-stake "test-pool" "k:kitty" 100.0)
(commit-tx)

;Emily stakes 100 kda
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-11T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool" 100.0))
(test.kadena-stake-fungiv2.create-stake "test-pool" "k:emily" 100.0)
(commit-tx)

;/////////////////////////////////

;SANITY CHECKS FOR BOTH STAKERS

;Kitty claims 5 rewards 1 day later
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-12T00:00:01Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:kitty" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

;Emily claimes 20 rewards 4 days later
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-15T00:00:02Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(env-gas 0) (env-gaslog)
(test.kadena-stake-fungiv2.claim "test-pool" "k:emily" false)
(env-gaslog)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

;Emily claimes 5 rewards 1 day later
;Emily unstakes 100 coin
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-16T00:00:03Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(env-gas 0) (env-gaslog)
(test.kadena-stake-fungiv2.claim "test-pool" "k:emily" true)
(env-gaslog)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

;Kitty claims 20 rewards same day
;Kitty unstakes 100 coin
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-16T00:00:03Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(env-gas 0) (env-gaslog)
(test.kadena-stake-fungiv2.claim "test-pool" "k:kitty" true)
(env-gaslog)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

;POOL DEACTIVATES AGAIN AFTER ALL REWARDS ARE EMITTED

;Kitty & Doug come along 10 days later attempts to claim rewards they dont have
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-26T00:00:00Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:kitty" false)
(test.kadena-stake-fungiv2.claim "test-pool" "k:doug" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

;/////////////////////////////////////////////////////////////////////////////////////////////////////////////

;Stuart comes along and reactivates pool
(begin-tx)
;Test adding 50 rewards to the empty pool, thus reactivating it
(test-capability (coin.TRANSFER "k:stuart" "test-pool" 50.0))
(expect
  "Added 50.0 coin rewards to test-pool"
  "Added 50.0 coin rewards to test-pool"
  (test.kadena-stake-fungiv2.add-balance-to-pool "test-pool" "k:stuart" 50.0))
;Stuart reactivates the pool with 50 new rewards for stakers
;All stakers left this pool when they claimed their rewards earlier
(commit-tx)

;Emily stakes 100 kda
(begin-tx)
(env-chain-data { "block-time" : (time "2023-05-01T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool" 100.0))
(test.kadena-stake-fungiv2.create-stake "test-pool" "k:emily" 100.0)
(commit-tx)

;Emily claims 10 rewards 1 day later
(begin-tx)
(env-chain-data { "block-time" : (time "2023-05-02T00:00:01Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:emily" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

;Emily claims 20 rewards 2 days later and unstakes 100 coin
(begin-tx)
(env-chain-data { "block-time" : (time "2023-05-04T00:00:02Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:emily" true)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)

;Kitty stakes 100 kda 10 days later
(begin-tx)
(env-chain-data { "block-time" : (time "2023-05-14T00:00:03Z") })
(test-capability (coin.TRANSFER "k:kitty" "test-pool" 100.0))
(test.kadena-stake-fungiv2.create-stake "test-pool" "k:kitty" 100.0)
(commit-tx)

;Kitty claims 10 rewards 1 day later
(begin-tx)
(env-chain-data { "block-time" : (time "2023-05-15T00:00:04Z") })
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(test.kadena-stake-fungiv2.claim "test-pool" "k:kitty" false)
(test.kadena-stake-fungiv2.get-pool-info "test-pool")
(commit-tx)
