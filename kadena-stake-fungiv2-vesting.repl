;;////////////////////
;;COIN ACCOUNT STUFF
;;////////////////////

;; Enable the table gas model and load the coin contract + create coin contract tables
(env-gasmodel "table")
(env-gaslimit 200000)
(begin-tx)
(env-gas 0) (env-gaslog)
(load "fungible-v2.pact")
(load "fungible-xchain-v1.pact")
(env-gaslog)
(expect
  "Gas cost of loading fungible contract"
  121235 (env-gas))
(env-gas 0) (env-gaslog)
(load "coin.pact")
(env-gaslog)
(expect
  "Gas cost of loading coin contract"
  74192 (env-gas))
(create-table coin.coin-table)
(create-table coin.allocation-table)
(commit-tx)

;;///////////////////////////
;Create test keys
;////////////////////////////

(begin-tx)
(env-data { "k:emily" : ["emily"], "admin-kadena-stake": ["keys2"], "k:stuart": ["stuart"], "k:doug": ["doug"], "k:kitty": ["kitty"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
(env-keys ["emily", "keys2", "stuart", "doug", "kitty"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset "k:doug" (read-keyset "k:doug"))
(define-keyset 'admin-kadena-stake (read-keyset "admin-kadena-stake"))
(define-keyset "k:stuart" (read-keyset "k:stuart"))
(define-keyset "k:kitty" (read-keyset "k:kitty"))
(commit-tx)

;/////////////////////////////
;Create test coin accounts
;//////////////////////////////

(begin-tx)
(env-gas 0) (env-gaslog)
(use coin)
(env-gaslog)
(expect
  "Gas cost of using the coin contract"
  2 (env-gas))
(env-gas 0) (env-gaslog)
(create-account "k:emily" (read-keyset "k:emily"))
(create-account 'admin-kadena-stake (read-keyset 'admin-kadena-stake))
(create-account "k:stuart" (read-keyset "k:stuart"))
(create-account "k:doug" (read-keyset "k:doug"))
(create-account "k:kitty" (read-keyset "k:kitty"))
(commit-tx)

;///////////////////////////////
;Credit test accounts test KDA
;////////////////////////////////
(begin-tx)
(use coin)
(env-gas 0) (env-gaslog)
(test-capability (DEBIT "k:emily"))
(env-gaslog)
(expect
  "Gas cost of testing the DEBIT capability"
  26 (env-gas))

;; credit tests
(test-capability (CREDIT "k:emily"))
(credit "k:emily" (read-keyset "k:emily") 1000.0)

(test-capability (CREDIT "k:kitty"))
(credit "k:kitty" (read-keyset "k:kitty") 1000.0)

(test-capability (CREDIT "k:doug"))
(credit "k:doug" (read-keyset "k:doug") 1000.0)
(expect
  "account balance reflects credit"
  1000.0
  (get-balance "k:emily"))

(test-capability (CREDIT "admin-kadena-stake"))
(credit 'admin-kadena-stake (read-keyset 'admin-kadena-stake) 1000.0)
(expect
  "account balance reflects credit"
  1000.0
  (get-balance 'admin-kadena-stake))

(test-capability (CREDIT "k:stuart"))
(credit "k:stuart" (read-keyset "k:stuart") 1000.0)
(expect
  "account balance reflects credit"
  1000.0
  (get-balance "k:stuart"))
(commit-tx)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;ANEDAK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(begin-tx)
(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test })
(load "anedak.pact")
(create-table token-table)


;DEFINE ACCOUNTS AGAIN
(env-data { "k:emily" : ["emily"], "admin-kadena-stake": ["keys2"], "k:stuart": ["stuart"], "k:doug": ["doug"], "k:kitty": ["kitty"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
(env-keys ["emily", "keys2", "stuart", "doug", "kitty"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset "k:doug" (read-keyset "k:doug"))
(define-keyset 'admin-kadena-stake (read-keyset "admin-kadena-stake"))
(define-keyset "k:stuart" (read-keyset "k:stuart"))
(define-keyset "k:kitty" (read-keyset "k:kitty"))

(describe-keyset "k:emily")

(test.anedak.check-reserved "k:emily")
(test.anedak.enforce-reserved2 "k:emily" (read-keyset "k:emily"))

;k:emily k:emily
;KeySet {keys: [k:emily],pred: keys-all}
;KeySet {keys: [emily],pred: keys-all}

(test.anedak.initialize)
(test.anedak.move-premine "k:emily"(read-keyset "k:emily") 1000.0  )
(test.anedak.get-balance "k:emily")

;(test.anedak.create-account "k:kitty" (read-keyset "k:kitty"))

(commit-tx)

(begin-tx)
(use test.anedak)
(test-capability (test.anedak.TRANSFER "k:emily" "k:kitty" 100.0))
(test.anedak.transfer-create "k:emily" "k:kitty" (read-keyset "k:kitty") 100.0)

(test-capability (test.anedak.TRANSFER "k:emily" "k:doug" 100.0))
(test.anedak.transfer-create "k:emily" "k:doug" (read-keyset "k:doug") 100.0)

(test-capability (test.anedak.TRANSFER "k:emily" "k:stuart" 100.0))
(test.anedak.transfer-create "k:emily" "k:stuart" (read-keyset "k:stuart") 100.0)
(commit-tx)
;We transfer 100 ADK to stakers for testing with below


;;;;;;;;;;;;;;;;;;;;;;;;;////////////////////////////
;;kadena-stake TESTS
;;;;;;;;;;;;;;;;;;;;;;;;;;//////////////////////////

;Load Contract + Create Tables
(begin-tx)
(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test })
(env-gas 0) (env-gaslog)
(load "kadena-stake-fungiv2-vesting-negative.pact")
(env-gaslog)
(create-table test.kadena-stake-fungiv2-vesting-negative.pools)
(create-table test.kadena-stake-fungiv2-vesting-negative.pools-usage)
(create-table test.kadena-stake-fungiv2-vesting-negative.stakes)
(create-table test.kadena-stake-fungiv2-vesting-negative.pool-user-stats)
(commit-tx)


;Load Contract + Create Tables
(begin-tx)
(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test })
(env-gas 0) (env-gaslog)
(load "kadena-stake-fungiv2-vesting.pact")
(env-gaslog)
(create-table test.kadena-stake-fungiv2-vesting.pools)
(create-table test.kadena-stake-fungiv2-vesting.pools-usage)
(create-table test.kadena-stake-fungiv2-vesting.stakes)
(create-table test.kadena-stake-fungiv2-vesting.pool-user-stats)
(commit-tx)

(begin-tx)
(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test, 'upgrade: true })
(env-gas 0) (env-gaslog)
(load "kadena-stake-fungiv2-vesting-negative-2.pact")
(env-gaslog)
(commit-tx)

;//////////////////////////////////////////////////////////////////////////////////////////////////////////
;TEST POOL TEST
;VESTING POOL VARIABLE APY TESTING 1
;TEST GENERAL FUNCTIONALITY OF VESTING POOLS
;STAKING / CLAIMING / WITHDRAWING / POOL DEACTIVATION
;/////////////////////////////////////////////////////////////////////////////////////////////////////////

;/////////////////////////////////////////////////////////////////////////////////

;Test create vesting pool 'test-pool' with k:stuart for 50 KDA
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-pool" 50.0))
(env-chain-data { "block-time" : (time "2023-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2-vesting.create-pool
    "test-pool"
    "Test Pool"
    50.0
    coin
    "k:stuart"
    50.0
    0.0
    86400.0
    10.0
    0.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(commit-tx)
;A pool is created with 50 KDA rewards
;The pool will distribute 10 rewards every 86400.0 seconds (1 day)
;pool multiplier: 1.0

;/////////////////////////////////////////////////////////////////////////////////////

;Test create stake 100% allocation to beneficiary acccount k:emily
(begin-tx)
(coin.get-balance "k:emily")
(env-chain-data { "block-time" : (time "2023-04-01T00:00:00Z") })

(test-capability (coin.TRANSFER "k:emily" "test-pool" 100.0))
(test-capability (test.kadena-stake-fungiv2-vesting.POOL_CREATOR_GUARD "test-pool"))
(test.kadena-stake-fungiv2-vesting.create-stake "test-pool" "k:emily" 100.0 true 0.0 50.0)

(coin.get-balance "k:emily")
(coin.get-balance "test-pool")

(expect
    "Emily gets 0 rewards same day she stakes"
    0.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-rewards "test-pool" "k:emily")
)

(expect
    "Current Pool Multiplier = 1.0"
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")) 1.0)
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")) 1.0)
)

(expect
    "Emilys Saved Multiplier = 1.0"
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:emily")) 1.0)
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:emily")) 1.0)
)

(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:emily")

(commit-tx)
;Emily is allocated 100% of the pool


;////////////////////////////////////////////////////////////////////////////////////////////////

;Lets check rewards 1 DAY later for emily
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-02T00:00:00Z") })
;Fastforward time +24 hours

(expect
    "The Pool has emitted 10 tokens thus far"
    10.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-total-emitted-tokens "test-pool")
)

(expect
    "Emily gets 10 rewards if she withdraws today"
    10.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-rewards "test-pool" "k:emily")
)

(expect
    "Current Pool Multiplier = 1.0"
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")) 1.0)
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")) 1.0)
)

(expect
    "A multiplier calculated right now is 1.1"
    1.1
    (test.kadena-stake-fungiv2-vesting.calculate-multiplier "test-pool")
)

(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:emily")
(commit-tx)
;Test passes - Next day data is correct

;////////////////////////////////////////////////////////////////////////////////////////////////


;Lets check rewards 2 DAYS later for emily
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-03T00:00:00Z") })
;Fastforward time +24 hours

(expect
    "The Pool has emitted 20 tokens thus far"
    20.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-total-emitted-tokens "test-pool")
)

(expect
    "Emily gets 20 rewards if she withdraws today"
    20.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-rewards "test-pool" "k:emily")
)

(expect
    "Current Pool Multiplier = 1.0"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")) 1.0)
)

(expect
    "A multiplier calculated right now is 1.2"
    1.2
    (test.kadena-stake-fungiv2-vesting.calculate-multiplier "test-pool")
)
(commit-tx)
;Test passes - Next day data is correct

;/////////////////////////////////////////////////////////////////////////////////////////////////////

;Test create 100% allocation with account k:doug
(begin-tx)
(coin.get-balance "k:doug")
(env-chain-data { "block-time" : (time "2023-04-03T00:00:00Z") })
(test-capability (coin.TRANSFER "k:doug" "test-pool" 100.0))
(test.kadena-stake-fungiv2-vesting.create-stake "test-pool" "k:doug" 100.0 true 0.0 50.0)
(coin.get-balance "k:doug")
(coin.get-balance "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:doug")

(expect
    "Doug gets 0 rewards same day he stakes"
    0.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-rewards "test-pool" "k:doug")
)

(expect
    "Current Pool Multiplier = 1.2"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")) 1.2)
)

(expect
    "Dougs Saved Multiplier = 1.2"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:doug")) 1.2)
)

(commit-tx)
;Dougs weight is same as emilys, they both share an equal 50% split of the rewards

;/////////////////////////////////////////////////////////////////////////////////////////////////////////


;Lets check rewards 3 DAYS later for emily and doug
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-04T00:00:00Z") })
;Fastforward time +24 hours

(expect
    "The Pool has emitted 30 tokens thus far"
    30.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-total-emitted-tokens "test-pool")
)

(expect
    "Emily gets 25 rewards if she withdraws today"
    25.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-rewards "test-pool" "k:emily")
)

(expect
    "Doug gets 5 rewards if she withdraws today"
    5.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-rewards "test-pool" "k:doug")
)

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")

(expect
    "Current Pool Multiplier = 1.2"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")) 1.2)
)

(expect
    "A multiplier calculated right now is 1.25"
    1.25
    (test.kadena-stake-fungiv2-vesting.calculate-multiplier "test-pool")
)
(commit-tx)
;Test passes - Next day data for both stakers is correct

;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


;Test create 100% weight allocation with account k:kitty SAME DAY AS ABOVE
(begin-tx)
(coin.get-balance "k:kitty")
(env-chain-data { "block-time" : (time "2023-04-04T00:00:00Z") })
(test-capability (coin.TRANSFER "k:kitty" "test-pool" 100.0))
(test.kadena-stake-fungiv2-vesting.create-stake "test-pool" "k:kitty" 100.0 true 0.0 50.0)
(coin.get-balance "k:kitty")
(coin.get-balance "test-pool")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")

(expect
    "Kitty gets 0 rewards same day he stakes"
    0.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-rewards "test-pool" "k:kitty")
)

(expect
    "Current Pool Multiplier = 1.25"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")) 1.25)
)


(expect
    "Dougs Saved Multiplier = 1.25"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:kitty")) 1.25)
)

(commit-tx)
;Kitty is given 100% weight allocation as well, since all 3 accounts have an equal weight of 100%, each account owns 33.3% of the pool and earns 33.3% of rewards

;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

;Lets check rewards 4 DAYS later for emily and doug and kitty
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-05T00:00:00Z") })
;Fastforward time +24 hours

(expect
    "The Pool has emitted 40 tokens thus far"
    40.000000000000
    (test.kadena-stake-fungiv2-vesting.calculate-total-emitted-tokens "test-pool")
)

(expect
    "Emily gets 28.3 rewards if she withdraws today"
    28.333333333333
    (test.kadena-stake-fungiv2-vesting.calculate-rewards "test-pool" "k:emily")
)

(expect
    "Doug gets 8.3 rewards if she withdraws today"
    8.333333333333
    (test.kadena-stake-fungiv2-vesting.calculate-rewards "test-pool" "k:doug")
)

(expect
    "Kitty gets 3.3 rewards if she withdraws today"
    3.333333333333
    (test.kadena-stake-fungiv2-vesting.calculate-rewards "test-pool" "k:kitty")
)

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")

(expect
    "Current Pool Multiplier = 1.25"
    true
    (= (at "multiplier" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")) 1.25)
)

;(test.kadena-stake-fungiv2-vesting.calculate-multiplier-current "test-pool")
;(test.kadena-stake-fungiv2-vesting.calculate-multiplier-test "test-pool")
;(test.kadena-stake-fungiv2-vesting.calculate-multiplier-test2 "test-pool")

(expect
    "A multiplier calculated right now is 1.283"
    1.283333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333
    (test.kadena-stake-fungiv2-vesting.calculate-multiplier "test-pool")
)
(commit-tx)
;Test passes - Next day data for both stakers is correct

;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

;THE NEXT 3 TESTS WILL SPAN OVER 3 DAYS
;RECIPIENTS WILL RECIEVE FUNDS FOR 3 DAYS UNTIL THE VESTING POOL HAS EMITTED ALL ITS TOKENS

;////4 Days after pool launch - 40 rewards emitted
;///+24 HOURS

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-05T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:emily")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:emily")
(commit-tx)
;Correct


(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-05T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:doug")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:doug")
(commit-tx)
;Correct

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-05T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:kitty")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:kitty")
(commit-tx)
;Correct

;////5 Days after pool launch - 50 rewards emitted
;///+24 HOURS

(begin-tx)

(env-chain-data { "block-time" : (time "2023-04-06T00:00:02Z") })

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:emily")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:emily")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-06T00:00:02Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:doug")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:doug")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-06T00:00:02Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:kitty")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:kitty")
(commit-tx)

;////6 Days after pool launch - Max rewards emitted - Pool will empty and deactivate in this test
;///+24 HOURS

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-07T00:00:03Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:emily")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:emily")
(commit-tx)

(begin-tx)
(expect
  "0.02 Tokens Left In Pool - Correct"
  0.000000000002
  (coin.get-balance "test-pool"))
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-07T00:00:03Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:doug")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:doug")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-07T00:00:03Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:kitty")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:kitty")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-09T00:00:04Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:emily")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:emily")
(commit-tx)

(begin-tx)
(expect
  "0 Tokens Left In Pool - Correct"
  0.000000000000
  (coin.get-balance "test-pool"))
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-10T00:00:03Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:doug")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-10T00:00:03Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:kitty")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-10T00:00:04Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:emily")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(commit-tx)

;///The pool has emitted all rewards and deactivated

;////////////////////////////////////////////////////////////////////////////////////////////////////////

;SANITY CHECK TIME
;TEST AND CONFIRM PROPER LOGIC

;///////////////////////////////////////////////////////////////////////////////////////////////////////

(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-10T00:00:00Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")

(test.kadena-stake-fungiv2-vesting.calculate-total-emitted-tokens "test-pool")
;Pool has emitted 50 tokens

;Test create new account allocation in a deactivated pool
(test-capability (coin.TRANSFER "k:kitty" "test-pool" 100.0))
(expect
  "The vesting pool test-pool is deactivated."
  "The vesting pool test-pool is deactivated."
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool" "k:kitty" 100.0 false 0.0 50.0))
;Kitty cannot be allocated tokens rewards because the pool is deactivated and empty - correct

;Test claim allocations from a pool that a user has 0 rewards due
(expect-failure "There are no allocations to claim for this account"
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:emily" false))
;Emily has no allocations to claim

;Test adding 50 rewards to the empty pool while its exhausted
(test-capability (coin.TRANSFER "k:stuart" "test-pool" 50.0))
(expect-failure "You cannot add rewards to exhausted pools."
(test.kadena-stake-fungiv2-vesting.add-balance-to-pool "test-pool" "k:stuart" 50.0))
;Stuart cannot reactivate the exhausted pool

;Test claim allocations again with emily for sanity check after pool reactivation
(expect-failure "There are no allocations to claim for this account"
(test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:emily" false))
;Emily has no allocations in test pool - correct

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(commit-tx)

;////////////////////////////////////////////////////////////////////////////////////////////////////////////

;CONTINUATION OF POOL AFTER POOL COLLAPSES AND GETS REACTIVATED BY STUART

;/////////////////////////////////////////////////////////////////////////////////////////////////////////////

;2 ACCOUNTS ARE CREATED WITH EQUAL WEIGHT:

;The pool creator trys to allocate more rewards to kitty but cannot because the pool is empty
(begin-tx)
(test.kadena-stake-fungiv2-vesting.calculate-total-emitted-tokens "test-pool")
(env-chain-data { "block-time" : (time "2023-04-11T00:00:00Z") })
(test.kadena-stake-fungiv2-vesting.calculate-total-emitted-tokens "test-pool")
(test-capability (coin.TRANSFER "k:kitty" "test-pool" 100.0))
(expect
  "The vesting pool test-pool is deactivated."
  "The vesting pool test-pool is deactivated."
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool" "k:kitty" 100.0 true 0.0 50.0))
(commit-tx)
;Correct

;The pool creator trys to allocate more rewards to emily but cannot because the pool is empty
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-11T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool" 100.0))
(expect
  "The vesting pool test-pool is deactivated."
  "The vesting pool test-pool is deactivated."
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool" "k:emily" 100.0 false 0.0 50.0))
(commit-tx)
;Correct

;///////////////////////////////////////////////////////////////////////////////////////////////////////////////

;SANITY CHECKS FOR BOTH STAKERS

;Attempt to claim rewards 10 days after pool is exhausted
(begin-tx)
(env-chain-data { "block-time" : (time "2023-04-26T00:00:00Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(expect
  "Awarded k:kitty with 0.0 coin"
  "Awarded k:kitty with 0.0 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:kitty"))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(commit-tx)
;Kitty gets nothing

;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

;Now we will again attempt to reactivate the pool to see the pool refuse stakers due to being exhausted

;Stuart comes along and reactivates pool
(begin-tx)
;Test adding 50 rewards to the empty pool, thus reactivating it
(test-capability (coin.TRANSFER "k:stuart" "test-pool" 50.0))
(expect-failure "You cannot add rewards to exhausted pools."
(test.kadena-stake-fungiv2-vesting.add-balance-to-pool "test-pool" "k:stuart" 50.0))
;Stuart cannot reactivate this pool because it exhausted all of its rewards
(commit-tx)

;The pool creator trys to create an account in an exhausted pool but cannot
(begin-tx)
(env-chain-data { "block-time" : (time "2023-05-01T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool" 100.0))
(expect
  "The vesting pool test-pool is deactivated."
  "The vesting pool test-pool is deactivated."
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool" "k:emily" 100.0 true 0.0 50.0))
(commit-tx)
;Correct - the pool has nothing to give away and refuses new accounts

;The pool creator trys to create another account in a deactivated pool
(begin-tx)
(env-chain-data { "block-time" : (time "2023-05-14T00:00:03Z") })
(test-capability (coin.TRANSFER "k:kitty" "test-pool" 100.0))
(expect
  "The vesting pool test-pool is deactivated."
  "The vesting pool test-pool is deactivated."
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool" "k:kitty" 100.0 true 0.0 50.0))
(commit-tx)
;Correct - no new accounts can be created because the pool is deactivated

;Attempt to claim rewards after pool is deactivated
(begin-tx)
(env-chain-data { "block-time" : (time "2023-05-15T00:00:04Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(expect
  "Awarded k:kitty with 0.0 coin"
  "Awarded k:kitty with 0.0 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool" "k:kitty"))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool" "k:kitty")
(commit-tx)
;Kitty is due 0 rewards
;Paid: 50 - Correct, the pool has paid out 150 rewards
;Balance: 0 - Correct, the pool has paid out all its rewards
;Stakers: 0 - Correct, all stakers have left the pool

;///////////////////////////////////////////////////////////////////////////////////////////////////////////

;VARIABLE APY TEST POOL 2
;TESTING POOL EXHAUSTION
;TEST POOL REFUSES CREATION OF NEW ACCOUNTS IF IT DOESNT HAVE TOKENS TO DISTRIBUTE

;////////////////////////////////////////////////////////////////////////////////////////////////////////////

;HERE WE TEST A BENEFICIARY WHO EARNS REWARDS, BUT DOESNT CLAIM THEM FOR A LONG TIME
;THE POOL SHOULD NOT ALLOW NEW ACCOUNTS IF ITS EMITTED ALL TOKENS AND NOONE HAS CLAIMED THEM!

;Test create pool 'test-pool2' with k:stuart for 50 KDA
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-pool2" 50.0))
(env-chain-data { "block-time" : (time "2030-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2-vesting.create-pool
    "test-pool2"
    "Test Pool2"
    50.0
    coin
    "k:stuart"
    50.0
    0.0
    86400.0
    10.0
    0.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool2")
(commit-tx)
;A pool is created with 50 KDA rewards
;The pool will distribute 10 rewards every 86400.0 seconds (1 day)
;pool multiplier: 1.0

;Create account emily with 100% weight
(begin-tx)
(coin.get-balance "k:emily")
(env-chain-data { "block-time" : (time "2030-05-01T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool2" 100.0))
(expect
  "Allocated 100.0% of emissions to k:emily for 10.0 coin every 86400.0 seconds"
  "Allocated 100.0% of emissions to k:emily for 10.0 coin every 86400.0 seconds"
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool2" "k:emily" 100.0 true 0.0 50.0))
(coin.get-balance "k:emily")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool2")
(commit-tx)
;Note pool end time is 05/06

;FAST FORWARD TO 05/06

;The pool owner trys to make another beneficiary account after the pool is exhausted at end-time
(begin-tx)
(env-chain-data { "block-time" : (time "2030-05-06T00:00:00Z") })
(test-capability (coin.TRANSFER "k:kitty" "test-pool2" 100.0))
(expect
  "Pool test-pool2 is exhausted and can not distribute allocations any further."
  "Pool test-pool2 is exhausted and can not distribute allocations any further."
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool2" "k:kitty" 100.0 true 0.0 50.0))
(commit-tx)
;Correct - The beneficiary kitty cannot be added because there are no more rewards to distribute after the end-time

;Emily claims her 50 tokens a month later
(begin-tx)
(coin.get-balance "test-pool2")
(env-chain-data { "block-time" : (time "2030-05-07T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool2")
(expect
  "Awarded k:emily with 50.000000000000 coin"
  "Awarded k:emily with 50.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool2" "k:emily"))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool2")
(coin.get-balance "test-pool2")
(commit-tx)
;Correct!

;THE POOL REFUSES THE NEW STAKER AND REWARDS THE OLD STAKER PROPERLY


;///////////////////////////////////////////////////////////////////////////////////////

;VARIABLE APY TEST POOL 3
;TESTING POOL EXHAUSTION
;POOL REFUSES CREATING A NEW BENEFICIARY ACCOUNT DUE TO THE POOL BEING EXHAUSTED / OWING ALL TOKENS

;///////////////////////////////////////////////////////////////////////////////////////

;HERE WE TEST THE POOL WITH A BENEFICIARY WHO DOESNT CLAIM REWARDS FOR A LONG TIME
;THE POOL SHOULD NOT ALLOW NEW BENEFICIARYS IF ITS EMITTED ALL TOKENS! EVEN IF NOONE HAS CLAIMED THEM!
;INCLUDES AN ALTERNATIVE TEST WHERE THE POOL OWNER ADDS REWARDS TO THE POOL TO EXTEND ITS END TIME

;Test create pool 'test-pool2' with k:stuart for 50 KDA
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-pool3" 50.0))
(env-chain-data { "block-time" : (time "2040-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2-vesting.create-pool
    "test-pool3"
    "Test Pool3"
    50.0
    coin
    "k:stuart"
    50.0
    0.0
    86400.0
    10.0
    0.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool3")
(commit-tx)
;A pool is created with 50 KDA rewards
;The pool will distribute 10 rewards every 86400.0 seconds (1 day)
;pool multiplier: 1.0

;Emilys account is created with 100% weight of pool
(begin-tx)
(coin.get-balance "k:emily")
(env-chain-data { "block-time" : (time "2040-05-01T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool3" 100.0))

(expect
  "Allocated 100.0% of emissions to k:emily for 10.0 coin every 86400.0 seconds"
  "Allocated 100.0% of emissions to k:emily for 10.0 coin every 86400.0 seconds"
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool3" "k:emily" 100.0 true 0.0 50.0))

(coin.get-balance "k:emily")
(commit-tx)
;correct

;Emily claims her 20 rewards 2 days after staking - correct
(begin-tx)
(env-chain-data { "block-time" : (time "2040-05-03T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool3")

(expect
  "Awarded k:emily with 20.000000000000 coin"
  "Awarded k:emily with 20.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool3" "k:emily"))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool3")
(commit-tx)
;;Emily claims her 20 rewards 2 days after staking - correct

;TEST ADD BALANCE TO POOL TO SEE POOL CHANGE END-TIME
;UNCOMMENT BELOW TO TEST
; ;Stuart adds 50KDA more to the pool
; (begin-tx)
; (env-chain-data { "block-time" : (time "2040-05-03T00:00:02Z") })
; (test-capability (coin.TRANSFER "k:stuart" "test-pool3" 50.0))
; (test.kadena-stake-fungiv2-vesting.add-balance-to-pool "test-pool3" "k:stuart" 50.0)
; (commit-tx)

;Emily claims 10 rewards after staking for 1 more day
(begin-tx)
(env-chain-data { "block-time" : (time "2040-05-04T00:00:02Z") })

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool3")


(expect
  "Awarded k:emily with 10.000000000000 coin"
  "Awarded k:emily with 10.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool3" "k:emily"))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool3")
(commit-tx)
;Emily claims 10 rewards - correct

;Emily claims 10 rewards again for staking 1 more day
(begin-tx)
(env-chain-data { "block-time" : (time "2040-05-05T00:00:03Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool3")

(expect
  "Awarded k:emily with 10.000000000000 coin"
  "Awarded k:emily with 10.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool3" "k:emily"))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool3")
(commit-tx)
;Emily claims 10 rewards -correct

;Attempt to create account in exhausted pool
;or
;If test is uncommented out, this is an attempt to create an account in a pool that is not exhausted and succeeds
(begin-tx)
(coin.get-balance "k:kitty")
(env-chain-data { "block-time" : (time "2040-05-07T00:00:00Z") })
(test-capability (coin.TRANSFER "k:kitty" "test-pool3" 100.0))

(expect
  "Pool test-pool3 is exhausted and can not distribute allocations any further."
  "Pool test-pool3 is exhausted and can not distribute allocations any further."
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool3" "k:kitty" 100.0 true 0.0 50.0))

(coin.get-balance "k:kitty")
(commit-tx)
;Kittys account is not created
;OR
;Kittys account is created

;THE POOL REFUSES THE NEW STAKER AND REWARDS THE OLD STAKER PROPERLY

;//////////////////////////////////////////////////////////////////////////////////////////////////////////////

;VARIABLE APY TEST POOL 4
;TESTING HOW POOL HANDLES REWARDS FOR BENEFICIARYS WHO DONT CLAIM TOKENS FOR REALLY LONG PERIODS OF TIME

;///////////////////////////////////////////////////////////////////////////////////////////////////////////////

;HERE WE TEST A BENEFICIARY WHO EARNS TOKENS, BUT DOESNT CLAIM THEM FOR A LONG TIME
;THE POOL SHOULD REWARD ALL ACCOUNTS CORRECTLY EVEN WHEN THEY DONT CLAIM REWARDS FOR LONG PERIODS OF TIME!

;Test create pool 'test-pool2' with k:stuart for 50 KDA
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-pool4" 50.0))
(env-chain-data { "block-time" : (time "2050-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2-vesting.create-pool
    "test-pool4"
    "Test Pool4"
    50.0
    coin
    "k:stuart"
    50.0
    0.0
    86400.0
    10.0
    0.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(commit-tx)
;A pool is created with 50 KDA rewards
;The pool will distribute 10 rewards every 86400.0 seconds (1 day)
;pool multiplier: 1.0

;Emily is allocated 100% of emissions a month later
(begin-tx)
(coin.get-balance "k:emily")
(env-chain-data { "block-time" : (time "2050-05-01T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool4" 100.0))

(expect
  "Allocated 100.0% of emissions to k:emily for 10.0 coin every 86400.0 seconds"
  "Allocated 100.0% of emissions to k:emily for 10.0 coin every 86400.0 seconds"
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool4" "k:emily" 100.0 true 0.0 50.0))

(coin.get-balance "k:emily")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(commit-tx)
;Correct

;Emilys allocations are removed 4 days later
;Emily got fired from the team and they no longer want to pay her
(begin-tx)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(env-chain-data { "block-time" : (time "2050-05-05T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(test.kadena-stake-fungiv2-vesting.remove-account "test-pool4" "k:emily" false)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool4" "k:emily")
(commit-tx)
;Correct- Emily gets nothing and is removed from the pool as a beneficiary
;They chose not to pay her anything so her rewards are recycled back into the pool
;All beneficiary accounts now weigh differently since emilys weight is removed from the pool and will earn more tokens

;THERE ARE NOW 0 BENEFICIARYS IN THE POOL
;THE POOL HAS RAN FOR 5 DAYS AND PAID OUT TO NO BENEFICIARY
;EMILYS ALLOCATIONS WERE REMOVED AFTER 4 DAYS SO THE POOL SHOULD NOT BE EXHAUSTED
;EMILYS ALLOCATIONS SHOULD RECYCLE BACK INTO THE POOL TO BE REDISTRIBUTED AND IT SHOULD NOT CLOSE DUE TO EXHAUSTION
;ACCOUNTS SHOULD STILL BE ABLE TO BE ADDED TO THE POOL AS IF EMILY WAS NEVER A BENEFICIARY EVER

;Kitty is allocated 100% weight AFTER the pool would be exhausted if emilys allications were not removed
(begin-tx)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(env-chain-data { "block-time" : (time "2050-05-09T00:00:00Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(test-capability (coin.TRANSFER "k:kitty" "test-pool4" 100.0))

(expect
  "Allocated 100.0% of emissions to k:kitty for 10.0 coin every 86400.0 seconds"
  "Allocated 100.0% of emissions to k:kitty for 10.0 coin every 86400.0 seconds"
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool4" "k:kitty" 100.0 true 0.0 50.0))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")

(commit-tx)
;Correct - Kitty can stake 8 days later since emily was removed and the pool is not exhausted of tokens

;1 DAY GOES BY WITH KITTY HOLDING 100% OF WEIGHT IN POOL
;KITTY EARNS 10 TOKENS

;Emily makes up with the team and she gets re-hired, and the team allocates her half of the payment pool, a day after kitty was hired
(begin-tx)
(coin.get-balance "k:emily")
(env-chain-data { "block-time" : (time "2050-05-10T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool4" 100.0))

(expect
  "Allocated 50.0% of emissions to k:emily for 5.0 coin every 86400.0 seconds"
  "Allocated 50.0% of emissions to k:emily for 5.0 coin every 86400.0 seconds"
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool4" "k:emily" 100.0 true 0.0 50.0))

(coin.get-balance "k:emily")

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(commit-tx)
;Emily is back in the vesting pool earning 5 tokens a day with 50% weight of the pool

;KITTY AND EMILY SHARE 50% WEIGHT OF THE POOL NOW
;KITTY = 5 TOKENS PER DAY
;EMILY = 5 TOKENS PER DAY

;ANOTHER DAY GOES BY
;KITTY IS EMITTED 5 TOKENS AND EMILY IS EMITTED 5 TOKENS
;KITTY = 15 tokens total
;EMILY = 5 tokens total

;Emily claims her 5 tokens a DAY later
(begin-tx)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(env-chain-data { "block-time" : (time "2050-05-11T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")

(expect
  "Awarded k:emily with 5.000000000000 coin"
  "Awarded k:emily with 5.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool4" "k:emily"))

(coin.get-balance "k:emily")

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(commit-tx)
;Correct - emily should get 5 tokens for 1 day at 50% weight in pool

;Kitty claims his 15 tokens a month later
(begin-tx)
(env-chain-data { "block-time" : (time "2050-05-11T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")

(expect
  "Awarded k:kitty with 15.000000000000 coin"
  "Awarded k:kitty with 15.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool4" "k:kitty"))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(commit-tx)
;Correct - kitty should 15 tokens
;Day 1 = 100% Weight = 10 Tokens
;Day 2 = 50% WEight = 5 Tokens

;Emily claims her 5 tokens a DAY later
(begin-tx)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(env-chain-data { "block-time" : (time "2050-05-12T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")

(expect
  "Awarded k:emily with 5.000000000000 coin"
  "Awarded k:emily with 5.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool4" "k:emily"))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(commit-tx)
;Correct - emily was owed 5 tokens

;kitty claims his 5 tokens same day as emily
(begin-tx)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(env-chain-data { "block-time" : (time "2050-05-12T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")

(expect
  "Awarded k:kitty with 5.000000000000 coin"
  "Awarded k:kitty with 5.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool4" "k:kitty"))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(commit-tx)
;Correct - kitty was owed 5 tokens

;Emily claims her 5 tokens a DAY later
(begin-tx)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(env-chain-data { "block-time" : (time "2050-05-20T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")

(expect
  "Awarded k:emily with 10.000000000000 coin"
  "Awarded k:emily with 10.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool4" "k:emily"))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(commit-tx)
;Correct - emily was owed 5 tokens

;kitty claims his 5 tokens same day as emily
(begin-tx)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(env-chain-data { "block-time" : (time "2050-05-20T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")

(expect
  "Awarded k:kitty with 10.000000000000 coin"
  "Awarded k:kitty with 10.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool4" "k:kitty"))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool4")
(commit-tx)
;Correct - kitty was owed 5 tokens

;THE POOL IS DEACTIVATED AS EMILY CLAIMS THE LAST OF DISTRIBUTIONS

;///////////////////////////////////////////////////////////////////////////////////////
;ADK TOKEN TESTING
;TEST POOL 5
;ADK TOKEN IS EMITTED TO BENEFICIARYS
;///////////////////////////////////////////////////////////////////////////////////////
;TIME TO TEST OTHER TOKEN TYPES BESIDES COIN!
;TIME TO

;Test create pool 'test-pool5' with k:stuart for 50 ADK
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (test.anedak.TRANSFER "k:stuart" "test-pool5" 50.0))
(env-chain-data { "block-time" : (time "2060-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2-vesting.create-pool
    "test-pool5"
    "Test Pool5"
    50.0
    test.anedak
    "k:stuart"
    50.0
    0.0
    86400.0
    10.0
    0.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(commit-tx)
;A pool is created with 50 ADK rewards
;The pool will distribute 10 rewards every 86400.0 seconds (1 day)
;pool multiplier: 1.0

;Emily is added to pool as a beneficiary with 100% of weight in pool
(begin-tx)
(coin.get-balance "k:emily")

;We check emilys ADK balance to make sure it doesnt move
(expect
    "account balance reflects credit"
    700.00
    (test.anedak.get-balance "k:emily")
)

;We check the pools ADK balance
(expect
    "account balance reflects credit"
    50.00
    (test.anedak.get-balance "test-pool5")
)

(env-chain-data { "block-time" : (time "2060-05-01T00:00:00Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool5" 100.0))

(expect
  "Allocated 100.0% of emissions to k:emily for 10.0 test.anedak every 86400.0 seconds"
  "Allocated 100.0% of emissions to k:emily for 10.0 test.anedak every 86400.0 seconds"
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool5" "k:emily" 100.0 true 0.0 50.0))

;Emilys ADK balance reamins unchanged - Correct (This is a ADK rewards pool)
(expect
    "account balance reflects credit"
    700.00
    (test.anedak.get-balance "k:emily")
)

(coin.get-balance "k:emily")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(commit-tx)

;1 DAY HAS GONE BY! EMILY HAD 100% WEIGHT OF POOL FOR 24 HOURS AND EARNED 10 TOKENS!

;Kitty is allocated 75% of the weight of the pools emissions a day later
(begin-tx)
(env-chain-data { "block-time" : (time "2060-05-02T00:00:00Z") })
(test-capability (coin.TRANSFER "k:kitty" "test-pool5" 300.0))
(expect
  "Allocated 75.0% of emissions to k:kitty for 7.5 test.anedak every 86400.0 seconds"
  "Allocated 75.0% of emissions to k:kitty for 7.5 test.anedak every 86400.0 seconds"
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool5" "k:kitty" 300.0 true 0.0 50.0))
(commit-tx)
;Kitty now earns 7.5 tokens out of 10 tokens per day

;EMILY NOW EARNS 2.5 TOKENS PER DAY AND KITTY 7.5 TOKENS PER DAY
;EMILY = 25% WEIGHT
;KITTY = 75% WEIGHT

;Emily claims her 12.5 rewards after 2 days
;Day 1 = 100% Weight = 10 Tokens
;Day 2 = 25% weight = 2.5 Tokens
;Total = 12.5 tokens
(begin-tx)
(env-chain-data { "block-time" : (time "2060-05-03T00:00:00Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(expect
  "Awarded k:emily with 12.500000000000 test.anedak"
  "Awarded k:emily with 12.500000000000 test.anedak"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool5" "k:emily"))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")

;The pools ADK balance has decreased by 15.0 - Correct
(expect
    "account balance reflects credit"
    37.50
    (test.anedak.get-balance "test-pool5")
)

(commit-tx)
;Correct!

;Kitty claims his 7.5 tokens for 1 day of staking at 75% weight of pool
(begin-tx)
(env-chain-data { "block-time" : (time "2060-05-03T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(expect
  "Awarded k:kitty with 7.500000000000 test.anedak"
  "Awarded k:kitty with 7.500000000000 test.anedak"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool5" "k:kitty"))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool5" "k:kitty")
(commit-tx)
;Correct!

;Emily gets mad later and quits the team after she and kitty claimed their tokens on the same day
;The team removes her account:
(begin-tx)
(env-chain-data { "block-time" : (time "2060-05-03T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(test.kadena-stake-fungiv2-vesting.remove-account "test-pool5" "k:emily" false)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(commit-tx)
;Correct!

;Since emilys allocation was removed, kittys allocations are larger as he has 100% weight of the pool now
;Kitty now earns 10 KDA per day from this pool

(begin-tx)
(env-chain-data { "block-time" : (time "2060-05-04T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(expect
  "Awarded k:kitty with 9.999999999999 test.anedak"
  "Awarded k:kitty with 9.999999999999 test.anedak"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool5" "k:kitty" ))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool5" "k:kitty")
(commit-tx)

(begin-tx)
(env-chain-data { "block-time" : (time "2060-05-05T01:00:02Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(expect
  "Awarded k:kitty with 9.999999999999 test.anedak"
  "Awarded k:kitty with 9.999999999999 test.anedak"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool5" "k:kitty" ))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool5")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool5" "k:kitty")

(commit-tx)

;ADK IS CLAIMING AND WITHDRAWING PROPERLY

;///////////////////////////////////////////////////////////////////////////////////////
;ADK TOKEN TESTING
;TEST POOL 6
;ADK IS STAKED FOR KDA REWARDS
;///////////////////////////////////////////////////////////////////////////////////////
;TIME TO TEST OTHER TOKEN TYPES BESIDES COIN!
;WE CREATE A POOL THAT DISTRIBUTES ADK THIS TIME AND REPEAT A SIMPLE TEST
;HERE WE TEST OUR ABILITY TO TRANSFER DIFFERENT TOKEN TYPES

;Test create pool 'test-pool6' with k:stuart for 50 KDA
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-pool6" 50.0))
(env-chain-data { "block-time" : (time "2070-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2-vesting.create-pool
    "test-pool6"
    "Test Pool6"
    50.0
    coin
    "k:stuart"
    50.0
    86400.0
    86400.0
    10.0
    0.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(commit-tx)
;A pool is created with 50 ADK rewards
;The pool will distribute 10 rewards every 86400.0 seconds (1 day)
;pool multiplier: 1.0



;Emily is allocated 100% of pool rewards
(begin-tx)
(coin.get-balance "k:emily")

;We check the pools Coin balance
(expect
    "account balance reflects credit"
    50.00
    (coin.get-balance "test-pool6")
)

(env-chain-data { "block-time" : (time "2070-05-01T00:00:00Z") })

;Coin does not get 'staked' from emily like other pools
(expect
    "account balance reflects credit"
    1141.666666666668
    (coin.get-balance "k:emily")
)

(test-capability (test.anedak.TRANSFER "k:emily" "test-pool6" 100.0))

(expect
  "Allocated 100.0% of emissions to k:emily for 10.0 coin every 86400.0 seconds"
  "Allocated 100.0% of emissions to k:emily for 10.0 coin every 86400.0 seconds"
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool6" "k:emily" 100.0 true 0.0 50.0))

;Coin does not get 'staked' from emily like other pools
(expect
    "account balance reflects credit"
    1141.666666666668
    (coin.get-balance "k:emily")
)

(coin.get-balance "k:emily")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(commit-tx)

;Kittys account is created and allocated 50% weight of the pool
(begin-tx)
(env-chain-data { "block-time" : (time "2070-05-02T00:00:00Z") })
(test-capability (test.anedak.TRANSFER "k:kitty" "test-pool6" 100.0))
(expect
  "Allocated 50.0% of emissions to k:kitty for 5.0 coin every 86400.0 seconds"
  "Allocated 50.0% of emissions to k:kitty for 5.0 coin every 86400.0 seconds"
  (test.kadena-stake-fungiv2-vesting.create-stake "test-pool6" "k:kitty" 100.0 true 0.0 50.0))
(commit-tx)
;Kitty now earns 5 tokens per day and emily 5 tokens per day

;Emily claims her 15 tokens 2 days after staking total, with 1 day with kitty in the pool
;Day 1 = 100% Weight = 10 Tokens
;Dat 2 = 50% Weight = 5 Tokens
(begin-tx)
(env-chain-data { "block-time" : (time "2070-05-03T00:00:00Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(expect
  "Awarded k:emily with 15.000000000000 coin"
  "Awarded k:emily with 15.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool6" "k:emily"))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(commit-tx)
;Correct!

;Kitty claims his 5 tokens 1 day
(begin-tx)
(env-chain-data { "block-time" : (time "2070-05-03T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(expect
  "Awarded k:kitty with 5.000000000000 coin"
  "Awarded k:kitty with 5.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool6" "k:kitty"))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(commit-tx)
;Correct!

;Emilys account is removed 3 days later without paying it
(begin-tx)
(env-chain-data { "block-time" : (time "2070-05-06T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(test.kadena-stake-fungiv2-vesting.remove-account "test-pool6" "k:emily" false)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
;The pools end time is extended
(commit-tx)
;Correct!

;Kitty claims his 15 tokens the same day emilys account is removed from the pool,
;kitty is still due 15 tokens even if emily left now, he is still awarded for 50% weight for 3 days
(begin-tx)
(env-chain-data { "block-time" : (time "2070-05-06T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(expect
  "Awarded k:kitty with 15.000000000000 coin"
  "Awarded k:kitty with 15.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool6" "k:kitty"))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(commit-tx)
;Correct!

;Kitty claims tokens a day after emily has left the pool and earns 100% weight now
(begin-tx)
(env-chain-data { "block-time" : (time "2070-05-07T00:00:02Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(expect
  "Awarded k:kitty with 10.000000000000 coin"
  "Awarded k:kitty with 10.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool6" "k:kitty"))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(commit-tx)
;Correct! Allocations and weights are readjusted after emily leaves and kitty earns 10 per day instead of 5 per day

;Kitty claims what tokens he can a day after, the pool only has 5 tokens left so kitty gets 5 instead of 10 per day
(begin-tx)
(env-chain-data { "block-time" : (time "2070-05-08T00:00:03Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(expect
  "Awarded k:kitty with 5.000000000000 coin"
  "Awarded k:kitty with 5.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool6" "k:kitty"))
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool6")
(commit-tx)
;Correct!
;The pool only had 5 tokens left, and since kitty was earning 10 tokens per day, he earns the final 5
;The pool also shuts down and deactivates

;Test complete

;//////////////////////////////////////////////////////////////////////////////////
;VARIABLE APY TESTING WITH CLAIM DURATIONLIMITS AND WITHDRAW DURATION LIMITS
;TEST POOL 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Test a beneficiary getting fired after being allocated funds for 4 days
;The pool should recycle the beneciciarys funds back into the pool and extend the end time of the pool
;The other beneficiary accounts should recieve the same amounts they would until the fired beneficiary leaves
;After one beneficiary is removed, the others weight should increase and earn the tokens the other beneficiary would have

;Test create pool 'test-pool7' with k:stuart for 50 KDA
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-pool7" 50.0))
(env-chain-data { "block-time" : (time "2080-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2-vesting.create-pool
    "test-pool7"
    "Test Pool7"
    50.0
    coin
    "k:stuart"
    50.0
    86400.0
    86400.0
    10.0
    0.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")
(commit-tx)
;A vesting pool is created with 50 KDA rewards
;The pool will distribute 10 rewards every 86400.0 seconds (1 day)
;pool multiplier: 1.0


;Kittys beneficiary account is created with 25% weight of the reward
;Dougs beneficiary account is created with 25% weight of the reward
;Emilys beneficiary account is created with 50% weight of the reward
(begin-tx)
(env-chain-data { "block-time" : (time "2080-05-01T00:00:00Z") })
(test.kadena-stake-fungiv2-vesting.create-stake "test-pool7" "k:kitty" 25.0 true 0.0 10.0)
(test.kadena-stake-fungiv2-vesting.create-stake "test-pool7" "k:doug" 25.0 true 0.0 50.0)
(test.kadena-stake-fungiv2-vesting.create-stake "test-pool7" "k:emily" 50.0 true 0.0 50.0)
(commit-tx)
;We create 3 accounts in this pool splitting the 10KDA reward a day 25%/25%/50%


;Doug claims his allocation of 2.5 tokens 1 day later for 25% of pool
(begin-tx)
(env-chain-data { "block-time" : (time "2080-05-02T00:00:02Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")
(test.kadena-stake-fungiv2-vesting.claim "test-pool7" "k:doug")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")
(commit-tx)
;Correct

;Emily gets fired 4 days later and the team removes her from the vesting pool without paying her
(begin-tx)
(env-chain-data { "block-time" : (time "2080-05-05T00:00:02Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")
;Current pool end-time before emily is fire = 05/06
(coin.get-balance "k:emily")

(test.kadena-stake-fungiv2-vesting.calculate-pool-end-time "test-pool7" false true 20.0)
;Test new end date

(test.kadena-stake-fungiv2-vesting.remove-account "test-pool7" "k:emily" false)
;remove account

(coin.get-balance "k:emily")
;emily does not get paid

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")
;End time updates properly to 05/08 after recycling emilys funds that she was not paid for
(commit-tx)

;Emily attempts to claim but her account has been removed
(begin-tx)
(env-chain-data { "block-time" : (time "2080-05-05T00:00:03Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")

(expect
  "k:emily has no token emissions to claim in test-pool7"
  "k:emily has no token emissions to claim in test-pool7"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool7" "k:emily"))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")
(commit-tx)
;Correct - emily gets nothing

;Kitty withdraws his allocations 4 days after staking for 2.5 tokens at 25% of pool for 4 days
;Kitty has now claimed his max rewards for his account
(begin-tx)
(env-chain-data { "block-time" : (time "2080-05-05T00:00:03Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")

(expect
  "Awarded k:kitty with 10.000000000000 coin"
  "Awarded k:kitty with 10.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool7" "k:kitty"))


(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")
(test.kadena-stake-fungiv2-vesting.get-user-stakes "test-pool7" "k:kitty")
(commit-tx)
;Kitty gets proper rewards, the pool is exhausted, and deactivates - correct

;Kitty claims again a day later but he has already hit his max claims, the pool removes his allocation and recycles the funds he was due and extends its end-time
(begin-tx)
(env-chain-data { "block-time" : (time "2080-05-08T00:00:04Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")

(expect
  "k:kitty has no token emissions to claim in test-pool7"
  "k:kitty has no token emissions to claim in test-pool7"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool7" "k:kitty"))


(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")
(commit-tx)
;Kittys account is also removed as a staker

;With kittys allocation recycled, doug can now earn his allocation
;Doug now also earns 100% of the pool a day
(begin-tx)
(env-chain-data { "block-time" : (time "2080-05-10T00:00:04Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")

(expect
  "Awarded k:doug with 37.500000000000 coin"
  "Awarded k:doug with 37.500000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool7" "k:doug"))


(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool7")
(commit-tx)

;TEST PASES
;BENEFICIARYS EARN SAME AMOUNT UP UNTIL ANOTHER BENEFICARY IS REMOVED
;OLD BENEFICIARYS TAKE UP THE WEIGHT OF THE BENEFICIARY WHICH WAS REMOVED EVENLY

;//////////////////////////////////////////////////////////////////////////////////
;VESTING POOLS CONNECTED TO VESTING POOLS
;TEST POOL 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Here we make an example of a team creating a vesting pool account which dumps tokens into another vesting pool account
;Vesting pools can only be connected to 1 other vesting pool and they will auto migrate funds down from pool A to pool B

;Test create VESTING POOL 'test-pool8' with k:stuart for 50 KDA
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-pool8" 50.0))
(env-chain-data { "block-time" : (time "2090-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2-vesting.create-pool
    "test-pool8"
    "Test Pool8"
    50.0
    coin
    "k:stuart"
    50.0
    0.0
    86400.0
    10.0
    0.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool8")
(commit-tx)
;The pool will distribute 10 rewards every 86400.0 seconds (1 day)
;pool multiplier: 1.0
;This is the vesting pool that will pay the team, its made first

;Test create pool VESTING POOL 'test-poolV' with k:stuart
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-poolV" 200.0))
(env-chain-data { "block-time" : (time "2090-04-01T00:00:00Z") })

(test.kadena-stake-fungiv2-vesting.create-pool
    "test-poolV"
    "Test PoolV"
    200.0
    coin
    "k:stuart"
    200.0
    0.0
    86400.0
    10.0
    0.0
)
(coin.get-balance "k:stuart")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-poolV")
(commit-tx)
;This is the main vesting pool for the entire project which will pay the team pool

;Pool creator adds vesting pool 8 account to vesting pool V pool
(begin-tx)
(use test.kadena-stake-fungiv2-vesting)
(test-capability (test.kadena-stake-fungiv2-vesting.POOL_CREATOR_GUARD "test-poolV"))
(test.kadena-stake-fungiv2-vesting.create-stake "test-poolV" "test-pool8" 100.0 true 0.0 50.0)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-poolV")
(commit-tx)
;The vesting pool V will now emit its allocations to the vesting pool 8

;Pool creator adds k:emily to vesting pool 8
(begin-tx)
(use test.kadena-stake-fungiv2-vesting)
(test-capability (test.kadena-stake-fungiv2-vesting.POOL_CREATOR_GUARD "test-pool8"))
(test.kadena-stake-fungiv2-vesting.create-stake "test-pool8" "k:emily" 100.0 true 0.0 50.0)
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool8")
(commit-tx)
;Emily has full weight in vesting pool 8, and should earn 100% rewards at 10 KDA a day

;Pool creator connects the vesting pool 8 to the vesting pool V
(begin-tx)
(test.kadena-stake-fungiv2-vesting.connect-vesting-pool "test-pool8" "test-poolV" true)
(commit-tx)
;The vesting pool 8 will now claim allocations from the vesting pool V automatically

;Emily claims rewards 1 day later
(begin-tx)
(env-chain-data { "block-time" : (time "2090-04-02T00:00:01Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool8")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-poolV")

(expect
    "Vesting pool V balance"
    true
    (= (at "balance" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-poolV")) 200.0))

(expect
  "Awarded k:emily with 10.000000000000 coin"
  "Awarded k:emily with 10.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool8" "k:emily"))

(expect
    "Vesting pool V balance decreases due to migration of funds to Vesting pool 8"
    true
    (= (at "balance" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-poolV")) 190.0))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool8")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-poolV")
(commit-tx)
;Correct, emily is due 10 rewards today
;Correct, test pool V also migrates its funds down to test pool 8 on a CLAIM
;Correct test-pool 8 has paid 10 tokens, but still has a balance of 50 (this is due to the migration of tokens from pool A to pool B)

;Emily claims rewards 1 day later
(begin-tx)
(env-chain-data { "block-time" : (time "2090-04-03T00:00:02Z") })
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool8")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-poolV")

(expect
    "Vesting pool V balance decreases due to migration of funds to Vesting pool 8"
    true
    (= (at "balance" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-poolV")) 190.0))

(expect
  "Awarded k:emily with 10.000000000000 coin"
  "Awarded k:emily with 10.000000000000 coin"
  (test.kadena-stake-fungiv2-vesting.claim "test-pool8" "k:emily"))

(expect
    "Vesting pool V balance decreases due to migration of funds to Vesting pool 8"
    true
    (= (at "balance" (test.kadena-stake-fungiv2-vesting.get-pool-info "test-poolV")) 180.0))

(test.kadena-stake-fungiv2-vesting.get-pool-info "test-pool8")
(test.kadena-stake-fungiv2-vesting.get-pool-info "test-poolV")
(commit-tx)
;Correct, emily is due 10 rewards today
;Correct, test pool V also migrates its funds down to test pool 8 on a CLAIM
